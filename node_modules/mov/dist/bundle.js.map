{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "lib/component.js",
    "lib/index.js",
    "lib/template/compiler.js",
    "lib/template/directive.js",
    "lib/template/directives/attr.js",
    "lib/template/directives/each.js",
    "lib/template/directives/if.js",
    "lib/template/directives/index.js",
    "lib/template/directives/text.js",
    "lib/template/expression.js",
    "lib/template/index.js",
    "lib/template/template.js",
    "lib/template/utils.js",
    "node_modules/cify/index.js",
    "node_modules/ntils/index.js",
    "package.json"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const Class = require('cify');\nconst Template = require('./template');\n\nconst Component = function (classOpts) {\n\n  return new Class({\n    _extends: classOpts,\n    constructor: function (instanceOpts) {\n\n    }\n  });\n\n};\n\nmodule.exports = Component;",
    "const Template = require('./template');\nconst Component = require('./component');\nconst pkg = require('../package.json');\nconst utils = require('ntils');\n\nComponent.version = pkg.version;\nutils.copy(Template, Component);\nComponent.Component = Component;\n\n//普通脚本引入\nif (window) window[pkg.name] = Component;\n//amd 模块\nif (typeof define !== 'undefined' && define.amd) {\n  define(pkg.name, [], function () {\n    return Component;\n  });\n}\n//commonjs 模块\nmodule.exports = Component;",
    "const Class = require('cify');\nconst Directive = require('./directive');\nconst utils = require('./utils');\nconst Expression = require('./expression');\n\nconst Compiler = new Class({\n\n  constructor: function (options) {\n    options = options || {};\n    this.directives = options.directives || [];\n  },\n\n  findDirectives: function (type, name) {\n    return this.directives.filter(function (Directive) {\n      return Directive.type == type && Directive.regexp.test(name);\n    }, this);\n  },\n\n  _initDirectives: function (handler) {\n    //排序 directives\n    handler.directives = handler.directives.sort(function (a, b) {\n      return b.level - a.level;\n    });\n    //初始化 directives\n    var initedDirectives = [];\n    utils.each(handler.directives, function (index, directive) {\n      directive.index = index;\n      directive.init();\n      initedDirectives.push(directive);\n      if (directive.final) return handler.final = true;\n    }, this);\n    handler.directives = initedDirectives;\n  },\n\n  _compileElement: function (handler, node) {\n    var elementDirectives = this.findDirectives(Directive.TYPE_ELEMENT, node.nodeName);\n    elementDirectives.forEach(function (Directive) {\n      handler.directives.push(new Directive({\n        compiler: this,\n        handler: handler,\n        node: node\n      }));\n    }, this);\n  },\n\n  _compileAttributes: function (handler, node) {\n    utils.toArray(node.attributes).forEach(function (attribute) {\n      var attributeDirectives = this.findDirectives(Directive.TYPE_ATTRIBUTE, attribute.name);\n      attributeDirectives.forEach(function (Directive) {\n        handler.directives.push(new Directive({\n          compiler: this,\n          handler: handler,\n          node: node,\n          attribute: attribute,\n          expression: Directive.expression ? new Expression(attribute.value) : null\n        }));\n      }, this);\n    }, this);\n  },\n\n  _compileChildren: function (handler, node) {\n    if (handler.final) return;\n    utils.toArray(node.childNodes).forEach(function (childNode) {\n      var childhandler = this.compile(childNode);\n      childhandler.parent = this;\n      handler.children.push(childhandler);\n    }, this);\n  },\n\n  compile: function (node) {\n    node._parentNode = node._parentNode || node.parentNode;\n    //定义编译结果函数\n    var handler = function (scope) {\n      //执行指令\n      handler.directives.forEach(function (directive) {\n        directive.execute(scope);\n      }, this);\n      //执行子元素编译函数\n      handler.children.forEach(function (childhandler) {\n        childhandler(scope);\n      }, this);\n    };\n    //定义 children & directives \n    handler.directives = [];\n    handler.children = [];\n    //编辑相关指令\n    this._compileElement(handler, node);\n    this._compileAttributes(handler, node);\n    this._initDirectives(handler);\n    this._compileChildren(handler, node);\n    //返回编译后函数\n    return handler;\n  }\n\n});\n\nmodule.exports = Compiler;",
    "const Class = require('cify');\nconst utils = require('./utils');\nconst Expression = require('./expression');\n\nconst Directive = function (classOpts) {\n  classOpts = classOpts || {};\n  if (!utils.isString(classOpts.name) || classOpts.name.length < 1) {\n    throw new Error('Invalid directive name \"' + classOpts.name + '\"');\n  }\n  if (Directive.NS) {\n    classOpts.fullName = Directive.NS + ':' + classOpts.name;\n  } else {\n    classOpts.fullName = classOpts.name;\n  }\n  classOpts.Expression = Expression;\n  classOpts.utils = utils;\n  const DirectiveClass = new Class({\n    _extends: classOpts,\n    constructor: function (instanceOpts) {\n      //实例本身属性或方法\n      utils.copy(instanceOpts, this);\n    }\n  });\n  utils.copy(classOpts, DirectiveClass);\n  utils.defineProperty(DirectiveClass, 'name', {\n    get: function () { return classOpts.name; }\n  });\n  DirectiveClass.type = classOpts.type || Directive.TYPE_ATTRIBUTE;\n  DirectiveClass.level = classOpts.level || Directive.LEVEL_GENERAL;\n  DirectiveClass.regexp = classOpts.regexp || classOpts.fullName;\n  if (!(DirectiveClass.regexp instanceof RegExp)) {\n    DirectiveClass.regexp = new RegExp('^' + DirectiveClass.regexp + '$', 'i');\n  }\n  return DirectiveClass;\n};\n\n//指令类型\nDirective.TYPE_ATTRIBUTE = 'attribute';\nDirective.TYPE_ELEMENT = 'element';\n\n//指令级别\nDirective.LEVEL_ATTRIBUTE = -1000;\nDirective.LEVEL_GENERAL = 0;\nDirective.LEVEL_STATEMENT = 1000;\n\nmodule.exports = Directive;",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'attr',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_ATTRIBUTE,\n  regexp: /[\\s\\S]/i,\n\n  init: function () {\n    this.computedName = this.attribute.name;\n    this.computedValue = this.attribute.value;\n    this.nameExpr = new this.Expression(this.attribute.name, true);\n    this.valueExpr = new this.Expression(this.attribute.value, true);\n  },\n\n  execute: function (scope) {\n    var newComputedName = this.nameExpr.execute(scope);\n    if (this.computedName !== newComputedName) {\n      this.node.removeAttribute(this.computedName);\n      this.computedName = newComputedName;\n      if (!this.utils.isNull(this.computedName) && this.computedName.length > 0) {\n        this.node.setAttribute(this.computedName, '');\n      }\n    }\n    var newComputeValue = this.valueExpr.execute(scope);\n    newComputeValue = this.utils.isNull(newComputeValue) ? '' : newComputeValue;\n    if (this.computedValue !== newComputeValue) {\n      this.computedValue = newComputeValue;\n      this.node.setAttribute(\n        this.computedName,\n        this.computedValue\n      );\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'each',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_STATEMENT,\n  final: true,\n\n  init: function () {\n    this.mountNode = document.createTextNode('');\n    this.node.parentNode.insertBefore(this.mountNode, this.node);\n    this.node.removeAttribute(this.fullName);\n    this.node.parentNode.removeChild(this.node);\n    this._parseExpr();\n    this._items = [];\n  },\n\n  _parseExpr: function () {\n    this._type = this.attribute.value.indexOf(' in ') > -1 ? 'in' : 'of';\n    var tokens = this.attribute.value.split(' ' + this._type + ' ');\n    var fnText = 'utils.each(utils.getByPath(scope,\"' + tokens[1] + '\"),fn,this)';\n    this._each = new Function('utils', 'scope', 'fn', fnText);\n    var names = tokens[0].split(',').map(function (name) {\n      return name.trim();\n    });\n    if (this._type == 'in') {\n      this._index = names[0];\n      this._item = names[1];\n    } else {\n      this._index = names[1];\n      this._item = names[0];\n    }\n  },\n\n  execute: function (scope) {\n    var lastIndex = -1;\n    var docfrag = document.createDocumentFragment();\n    this._each(this.utils, scope, function (index, item) {\n      //创建新 scope\n      var newScope = this.utils.copy(scope);\n      if (this._index) newScope[this._index] = index;\n      if (this._item) newScope[this._item] = item;\n      var oldItem = this._items[index];\n      if (oldItem) {\n        oldItem.handler(newScope);\n      } else {\n        var newItem = {};\n        //创建新元素\n        newItem.node = this.node.cloneNode(true);\n        docfrag.appendChild(newItem.node);\n        newItem.node._parentNode = this.node._parentNode;\n        newItem.handler = this.compiler.compile(newItem.node);\n        newItem.handler(newScope);\n        this._items[index] = newItem;\n      }\n      lastIndex = index;\n    }, this);\n    this._items.splice(lastIndex + 1).forEach(function (item) {\n      item.node.parentNode.removeChild(item.node);\n    });\n    if (docfrag.childNodes.length > 0) {\n      this.mountNode.parentNode.insertBefore(docfrag, this.mountNode);\n    }\n  }\n\n});",
    "const Directive = require('../directive');\n\nmodule.exports = new Directive({\n  name: 'if',\n  type: Directive.TYPE_ATTRIBUTE,\n  level: Directive.LEVEL_STATEMENT,\n  final: true,\n  expression: true,\n\n  init: function () {\n    this.mountNode = document.createTextNode('');\n    this.node.parentNode.insertBefore(this.mountNode, this.node);\n    this.node.removeAttribute(this.fullName);\n    this.node.parentNode.removeChild(this.node);\n    this.state = false;\n    this.handler = this.compiler.compile(this.node);\n  },\n\n  execute: function (scope) {\n    var newState = this.expression.execute(scope);\n    if (newState) {\n      this.handler(scope);\n      if (!this.state) {\n        this.mountNode.parentNode.insertBefore(this.node, this.mountNode);\n      }\n    } else if (this.state) {\n      this.node.parentNode.removeChild(this.node);\n    }\n    this.state = newState;\n  }\n\n});",
    "module.exports = [\n  require('./text'),\n  require('./attr'),\n  require('./each'),\n  require('./if')\n];",
    "const Directive = require('../directive');\nconst Expression = require('../expression');\n\nmodule.exports = new Directive({\n  name: '#text',\n  type: Directive.TYPE_ELEMENT,\n\n  init: function () {\n    this.nodeValue = this.node.nodeValue;\n    this.expr = new Expression(this.node.nodeValue, true);\n  },\n\n  execute: function (scope) {\n    var newNodeValue = this.expr.execute(scope);\n    if (this.nodeValue !== newNodeValue) {\n      this.nodeValue = newNodeValue;\n      this.node.nodeValue = this.nodeValue;\n    };\n  }\n\n});",
    "const Class = require('cify');\nconst utils = require('./utils');\n\nconst Expression = new Class({\n\n  constructor: function (code, mix) {\n    this.func = mix ? this._compileMixedCode(code) : this._compileCode(code);\n  },\n\n  _compileCode: function (code) {\n    code = this._escapeEOL(this._wrapCode(code));\n    return new Function('scope', 'with(scope){return ' + code + '}');\n  },\n\n  _compileMixedCode: function (code) {\n    var statements = this._parseMixedCode(code);\n    code = this._escapeEOL(statements.join('+'));\n    return new Function('scope', 'with(scope){return ' + code + '}');\n  },\n\n  _parseMixedCode: function (code) {\n    var index = 0, length = code.length;\n    var token = '', isExpr = false, tokens = [];\n    while (index <= length) {\n      var char = code[index++];\n      var nextChar = code[index];\n      if (utils.isNull(char)) {\n        if (token.length > 0) {\n          tokens.push('\"' + this._escapeCode(token) + '\"');\n        }\n        token = '';\n        isExpr = false;\n      } else if (!isExpr && char + nextChar == '{{') {\n        if (token.length > 0) {\n          tokens.push('\"' + this._escapeCode(token) + '\"');\n        }\n        token = '';\n        isExpr = true;\n        index++;\n      } else if (isExpr && char + nextChar == '}}') {\n        if (token.length > 0) {\n          tokens.push(this._wrapCode(token));\n        }\n        token = '';\n        isExpr = false;\n        index++;\n      } else {\n        token += char;\n      }\n    }\n    return tokens;\n  },\n\n  _escapeCode: function (str) {\n    return str.replace(/\"/, '\\\\\"').replace('\\r\\n', '\\\\r\\\\n').replace('\\n', '\\\\n');\n  },\n\n  _wrapCode: function (code) {\n    return '((function(){try{return (' + code + ')}catch(err){return \"\"}})())';\n  },\n\n  _escapeEOL: function (code) {\n    return code.replace(/\\n/gm, '\\\\\\n');\n  },\n\n  execute: function (scope) {\n    scope = scope || {};\n    return this.func.call(scope, scope);\n  }\n\n});\n\nmodule.exports = Expression;",
    "const Compiler = require('./compiler');\nconst Directive = require('./directive');\nconst Expression = require('./expression');\nconst Template = require('./template');\nconst directives = require('./directives/');\nconst utils = require('./utils');\n\nconst compiler = new Compiler({\n  directives: directives\n});\n\nTemplate.Template = Template;\nTemplate.Compiler = Compiler;\nTemplate.compiler = compiler;\nTemplate.Directive = Directive;\nTemplate.Expression = Expression;\nTemplate.utils = utils;\n\nmodule.exports = Template;",
    "const Class = require('cify');\nconst utils = require('./utils');\n\nconst Template = new Class({\n\n  constructor: function (element, compiler) {\n    this.element = element;\n    this.compiler = compiler || Template.compiler;\n    this.render = this.compiler.compile(this.element);\n  }\n\n});\n\nmodule.exports = Template;",
    "const utils = require('ntils');\nmodule.exports = utils;\n\nutils.toArray = function (list) {\n  if (!list) return [];\n  return [].slice.call(list);\n};\n\nutils.NOOP = function () { };\n\nutils.includeExpr = function (str) {\n  if (!str) return false;\n  return str.indexOf('{{') > -1 && str.indexOf('}}') > -1;\n};\n\nutils.wrapScope = function (scope) {\n  scope = scope || {};\n  utils.each(window, function (name) {\n    scope[name] = scope[name] || null;\n  }, this);\n  return scope;\n};",
    "; (function () {\n  var createInstance = (function () {\n    var fnBody = ['switch(args.length){']\n    for (var i = 20; i > 0; i--) {\n      var fnArgs = []\n      for (var j = 0; j < i; j++) fnArgs.push('args[' + j + ']')\n      fnBody.push('case ' + i + ':return new Fn(' + fnArgs.join(',') + ');')\n    }\n    fnBody.push('case 0:default:return new Fn();}')\n    return new Function('Fn', 'args', fnBody.join(''))\n  })()\n\n  function getPropertyNames(obj) {\n    var nameList = Object.getOwnPropertyNames(obj)\n    if (obj.__proto__) {\n      nameList.push.apply(nameList, getPropertyNames(obj.__proto__))\n    }\n    return nameList\n  }\n\n  function isChildClass(_child, _super) {\n    if (_child.__proto__ == _super.prototype) {\n      return true\n    } else if (_child.prototype) {\n      return isChildClass(_child.prototype, _super)\n    } else {\n      return false\n    }\n  }\n\n  function createSuper(_self, proto) {\n    var _super = function () {\n      if (proto.constructor) {\n        proto.constructor.apply(_self, arguments)\n      }\n    }\n    delete _super.name\n    var nameList = getPropertyNames(proto)\n    nameList.forEach(function (name) {\n      if (name == '_super' ||\n        name == '_extends' ||\n        name == '_static' ||\n        name == 'constructor') {\n        return\n      }\n      if (typeof proto[name] === 'function') {\n        _super[name] = _super[name] || proto[name].bind(_self)\n      } else {\n        _super[name] = _super[name] || proto[name]\n      }\n    })\n    _super.__proto__ = {}\n    return _super\n  }\n\n  function defineClass(def) {\n    var classProto = ((typeof def === 'function') ? def() : def) || {}\n    var classExtends = classProto._extends\n    var clsssStatic = classProto._static || {}\n    if (typeof classExtends === 'function') {\n      classProto.__proto__ = classExtends.prototype\n      clsssStatic.__proto__ = classExtends\n    } else if (classExtends) {\n      classProto.__proto__ = classExtends\n    } else {\n      classProto.__proto__ = {}\n    }\n    classProto.__defineGetter__('_super', function () {\n      this.__super__ = this.__super__ || createSuper(this, classProto.__proto__)\n      return this.__super__\n    })\n    Class.prototype = classProto\n    Class.__proto__ = clsssStatic\n    function Class() {\n      var instance = this\n      if (typeof classExtends === 'function') {\n        instance = createInstance(classExtends, arguments)\n      }\n      instance.constructor = Class\n      instance._static = instance.Class = Class\n      instance.__proto__ = Class.prototype\n      var constructor = instance.__proto__.constructor\n      if (constructor != null &&\n        constructor != Object) {\n        var rs = constructor.apply(instance, arguments)\n        instance = rs && classProto.hasOwnProperty('constructor') ? rs : instance\n      }\n      instance.__proto__ = Class.prototype\n      delete instance._extends\n      return instance\n    }\n    Class.extendsOf = function (_super) {\n      return isChildClass(this, _super)\n    };\n    Class.superOf = function (_child) {\n      return isChildClass(_child, this)\n    };\n    return Class\n  }\n\n  defineClass.prototype.__proto__ = Function.prototype\n  defineClass.Class = defineClass\n\n  if (typeof module != 'undefined') {\n    module.exports = defineClass\n  }\n\n  if (typeof define == 'function' && define.amd) {\n    define('cify', [], function () {\n      return defineClass\n    })\n  }\n\n  if (typeof window != 'undefined') {\n    window.cify = window.Class = defineClass\n  }\n})()\n",
    "(function (owner) {\n  \"use strict\";\n\n  /**\n   * 验证一个对象是否为NULL\n   * @method isNull\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isNull = function (obj) {\n    return obj === null || typeof obj === \"undefined\";\n  };\n\n  /**\n   * 除去字符串两端的空格\n   * @method trim\n   * @param  {String} str 源字符串\n   * @return {String}     结果字符串\n   * @static\n   */\n  owner.trim = function (str) {\n    if (this.isNull(str)) return str;\n    if (str.trim) {\n      return str.trim();\n    } else {\n      return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n    }\n  };\n\n  /**\n   * 替换所有\n   * @method replace\n   * @param {String} str 源字符串\n   * @param {String} str1 要替换的字符串\n   * @param {String} str2 替换为的字符串\n   * @static\n   */\n  owner.replace = function (str, str1, str2) {\n    if (this.isNull(str)) return str;\n    return str.replace(new RegExp(str1, 'g'), str2);\n  };\n\n  /**\n   * 从字符串开头匹配\n   * @method startWith\n   * @param {String} str1 源字符串\n   * @param {String} str2 要匹配的字符串\n   * @return {Boolean} 匹配结果\n   * @static\n   */\n  owner.startWith = function (str1, str2) {\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) === 0;\n  };\n\n  /**\n   * 是否包含\n   * @method contains\n   * @param {String} str1 源字符串\n   * @param {String} str2 检查包括字符串\n   * @return {Boolean} 结果\n   * @static\n   */\n  owner.contains = function (str1, str2) {\n    var self = this;\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    if (self.isArray(str1)) {\n      return self.each(str1, function (i, str) {\n        if (str == str2) return true;\n      });\n    } else {\n      return str1 && str2 && str1.indexOf(str2) > -1;\n    }\n  };\n\n  /**\n   * 从字符串结束匹配\n   * @method endWidth\n   * @param {String} str1 源字符串\n   * @param {String} str2 匹配字符串\n   * @return {Boolean} 匹配结果\n   * @static\n   */\n  owner.endWith = function (str1, str2) {\n    if (this.isNull(str1) || this.isNull(str2)) return false;\n    return str1.indexOf(str2) === (str1.length - str2.length);\n  };\n\n  /**\n   * 是否包含属性\n   * @method hasProperty\n   * @param  {Object}  obj  对象\n   * @param  {String}  name 属性名\n   * @return {Boolean}      结果\n   * @static\n   */\n  owner.has = owner.hasProperty = function (obj, name) {\n    if (this.isNull(obj) || this.isNull(name)) return false;\n    return (name in obj) || (obj.hasOwnProperty(name));\n  };\n\n  /**\n   * 验证一个对象是否为Function\n   * @method isFunction\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isFunction = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === \"function\";\n  };\n\n  /**\n   * 验证一个对象是否为String\n   * @method isString\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isString = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'string' || obj instanceof String;\n  };\n\n  /**\n   * 验证一个对象是否为Number\n   * @method isNumber\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isNumber = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'number' || obj instanceof Number;\n  };\n\n  /**\n   * 验证一个对象是否为Boolean\n   * @method isBoolean\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isBoolean = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === 'boolean' || obj instanceof Boolean;\n  };\n\n  /**\n   * 验证一个对象是否为HTML Element\n   * @method isElement\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isElement = function (obj) {\n    if (this.isNull(obj)) return false;\n    if (window.Element) return obj instanceof Element;\n    else return (obj.tagName && obj.nodeType && obj.nodeName && obj.attributes && obj.ownerDocument);\n  };\n\n  /**\n   * 验证一个对象是否为HTML Text Element\n   * @method isText\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isText = function (obj) {\n    if (this.isNull(obj)) return false;\n    return obj instanceof Text;\n  };\n\n  /**\n   * 验证一个对象是否为Object\n   * @method isObject\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isObject = function (obj) {\n    if (this.isNull(obj)) return false;\n    return typeof obj === \"object\";\n  };\n\n  /**\n   * 验证一个对象是否为Array或伪Array\n   * @method isArray\n   * @param  {Object}  obj 要验证的对象\n   * @return {Boolean}     结果\n   * @static\n   */\n  owner.isArray = function (obj) {\n    if (this.isNull(obj)) return false;\n    var v1 = Object.prototype.toString.call(obj) === '[object Array]';\n    var v2 = obj instanceof Array;\n    var v3 = !this.isString(obj) && this.isNumber(obj.length) && this.isFunction(obj.splice);\n    var v4 = !this.isString(obj) && this.isNumber(obj.length) && obj[0];\n    return v1 || v2 || v3 || v4;\n  };\n\n  /**\n   * 验证是不是一个日期对象\n   * @method isDate\n   * @param {Object} val   要检查的对象\n   * @return {Boolean}           结果\n   * @static\n   */\n  owner.isDate = function (val) {\n    if (this.isNull(val)) return false;\n    return val instanceof Date;\n  };\n\n  /**\n   * 转换为数组\n   * @method toArray\n   * @param {Array|Object} _aar 伪数组\n   * @return {Array} 转换结果数组\n   * @static\n   */\n  owner.toArray = function (_aar) {\n    if (this.isNull(_aar)) return [];\n    try {\n      return Array.prototype.slice.call(_aar);\n    } catch (e) {\n      var arr = [];\n      var lan = _aar.length;\n      for (var i = 0; i < len; i++) {\n        arr[i] = s[i];\n      }\n      return arr;\n    }\n  };\n\n  /**\n   * 转为日期格式\n   * @method toDate\n   * @param {Number|String} val 日期字符串或整型数值\n   * @return {Date} 日期对象\n   * @static\n   */\n  owner.toDate = function (val) {\n    var self = this;\n    if (self.isNumber(val))\n      return new Date(val);\n    else if (self.isString(val))\n      return new Date(self.replace(self.replace(val, '-', '/'), 'T', ' '));\n    else if (self.isDate(val))\n      return val;\n    else\n      return null;\n  };\n\n  /**\n   * 遍历一个对像或数组\n   * @method each\n   * @param  {Object or Array}   obj  要遍历的数组或对象\n   * @param  {Function} fn            处理函数\n   * @return {void}                   无返回值\n   * @static\n   */\n  owner.each = function (list, handler, scope) {\n    if (this.isNull(list) || this.isNull(handler)) return;\n    if (this.isArray(list)) {\n      var listLength = list.length;\n      for (var i = 0; i < listLength; i++) {\n        var rs = handler.call(scope || list[i], i, list[i]);\n        if (!this.isNull(rs)) return rs;\n      }\n    } else {\n      for (var key in list) {\n        var rs = handler.call(scope || list[key], key, list[key]);\n        if (!this.isNull(rs)) return rs;\n      }\n    }\n  };\n\n  /**\n   * 格式化日期\n   * @method formatDate\n   * @param {Date|String|Number} date 日期\n   * @param {String} format 格式化字符串\n   * @return {String} 格式化结果\n   * @static\n   */\n  owner.formatDate = function (date, format) {\n    if (this.isNull(format) || this.isNull(date)) return date;\n    date = this.toDate(date);\n    var placeholder = {\n      \"M+\": date.getMonth() + 1, //month\n      \"d+\": date.getDate(), //day\n      \"h+\": date.getHours(), //hour\n      \"m+\": date.getMinutes(), //minute\n      \"s+\": date.getSeconds(), //second\n      \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n      \"S\": date.getMilliseconds() //millisecond\n    }\n    if (/(y+)/.test(format)) {\n      format = format.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (var key in placeholder) {\n      if (new RegExp(\"(\" + key + \")\").test(format)) {\n        format = format.replace(RegExp.$1,\n          RegExp.$1.length == 1 ? placeholder[key] :\n            (\"00\" + placeholder[key]).substr((\"\" + placeholder[key]).length));\n      }\n    }\n    return format;\n  };\n\n  /**\n   * 深度克隆对象\n   * @method clone\n   * @param {Object} obj 源对象\n   * @return {Object} 新对象\n   * @static\n   */\n  owner.clone = function (obj, igonreArray) {\n    if (this.isNull(obj) || this.isString(obj) || this.isNumber(obj) || this.isBoolean(obj) || this.isDate(obj)) {\n      return obj;\n    }\n    var objClone = obj;\n    try {\n      objClone = new obj.constructor();\n    } catch (ex) { }\n    for (var key in obj) {\n      if (objClone[key] != obj[key] && !this.contains(igonreArray, key)) {\n        if (typeof (obj[key]) === 'object') {\n          objClone[key] = this.clone(obj[key], igonreArray);\n        } else {\n          objClone[key] = obj[key];\n        }\n      }\n    }\n    this.each(['toString', 'valueOf'], function (i, name) {\n      if (this.contains(igonreArray, key)) return;\n      objClone[name] = obj[name];\n    }, this);\n    return objClone;\n  };\n\n  /**\n   * 拷贝对象\n   * @method copy\n   * @param {Object} obj1 源对象\n   * @param {Object} obj2 目标对象\n   * @static\n   */\n  owner.copy = function (obj1, obj2) {\n    obj2 = obj2 || {};\n    this.each(obj1, function (name) {\n      try {\n        obj2[name] = obj1[name];\n      } catch (ex) { }\n    })\n    return obj2;\n  };\n\n  /**\n   * 从一个数值循环到别一个数\n   * @param {number} fromNum 开始数值\n   * @param {Number} toNum 结束数值\n   * @param {Number} step 步长值\n   * @param {function} handler 执行函数\n   * @returns {void} 无返回\n   */\n  owner.fromTo = function (fromNum, toNum, step, handler) {\n    if (!handler) handler = [step, step = handler][0];\n    step = Math.abs(step || 1);\n    if (fromNum < toNum) {\n      for (var i = fromNum; i <= toNum; i += step) handler(i);\n    } else {\n      for (var i = fromNum; i >= toNum; i -= step) handler(i);\n    }\n  };\n\n  /**\n   * 生成一个Guid\n   * @method newGuid\n   * @return {String} GUID字符串\n   * @static\n   */\n  owner.newGuid = function () {\n    var S4 = function () {\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n  };\n\n  /**\n   * 定义属性\n   * @method defineProperty\n   * @param {Object} obj 对象\n   * @param {String} name 属性名\n   * @param {Object} context 属性定义\n   * @param {Boolean} compatible 是否使用兼容方式\n   * @static\n   */\n  owner.defineProperty = function (obj, name, context, compatible) {\n    if (!obj || !name || !context) return;\n    var self = this;\n    context.set = context.set || function () {\n      throw 'do not implement ' + name + ' setter.';\n    };\n    context.get = context.get || function () {\n      throw 'do not implement ' + name + ' getter.';\n    };\n    //--\n    if (!compatible) {\n      if (obj.__defineGetter__ && obj.__defineSetter__) {\n        obj.__defineSetter__(name, context.set);\n        obj.__defineGetter__(name, context.get);\n      } else if (Object.defineProperty) {\n        try {\n          Object.defineProperty(obj, name, context);\n        } catch (ex) { }\n      }\n    }\n    //--\n    if (!self.has(obj, name)) {\n      obj[name] = function (value) {\n        var method = self.isNull(value) ? 'get' : 'set';\n        return context[method].apply(obj, arguments || []);\n      };\n    }\n    return obj[name];\n  };\n\n  /**\n   * 对象变换\n   **/\n  owner.map = function (list, fn) {\n    var buffer = this.isArray(list) ? [] : {};\n    this.each(list, function (name, value) {\n      buffer[name] = fn(name, value);\n    });\n    return buffer;\n  };\n\n  /**\n   * 通过路径设置属性值\n   */\n  owner.setByPath = function (obj, path, value) {\n    if (this.isNull(obj) || this.isNull(path) || path === '') {\n      return;\n    }\n    if (!this.isArray(path)) {\n      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n    }\n    this.each(path, function (index, name) {\n      if (this.isNull(name) || name.length < 1) return;\n      if (index === path.length - 1) {\n        obj[name] = value;\n      } else {\n        obj[name] = obj[name] || {};\n        obj = obj[name];\n      }\n    }, this);\n  };\n\n  /**\n   * 通过路径获取属性值\n   */\n  owner.getByPath = function (obj, path) {\n    if (this.isNull(obj) || this.isNull(path) || path === '') {\n      return obj;\n    }\n    if (!this.isArray(path)) {\n      path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n    }\n    this.each(path, function (index, name) {\n      if (this.isNull(name) || name.length < 1) return;\n      if (!this.isNull(obj)) obj = obj[name];\n    }, this);\n    return obj;\n  };\n\n  /**\n   * 数组去重\n   **/\n  owner.unique = function (array) {\n    if (this.isNull(array)) return array;\n    var newArray = [];\n    var map = {};\n    this.each(array, function (i, value) {\n      if (map[value]) return;\n      map[value] = true;\n      newArray.push(value);\n    });\n    return newArray;\n  };\n\n  /**\n   * 解析 function 的参数列表\n   **/\n  owner.getFunctionArgumentNames = function (fn) {\n    if (!fn) return [];\n    var src = fn.toString();\n    var parts = src.split(')')[0].split('=>')[0].split('(');\n    return (parts[1] || parts[0]).split(',').map(function (name) {\n      return name.trim();\n    }).filter(function (name) {\n      return name != 'function';\n    });\n  };\n\n  /**\n   * 处理URL\n   * @method wrapUrl\n   * @param  {String} _url 原始URL\n   * @return {String}      处理过的URL\n   * @static\n   */\n  owner.wrapUrl = function (url) {\n    if (this.isNull(url)) return url;\n    if (url.indexOf('?') > -1) {\n      url += \"&__t=\" + this.newGuid();\n    } else {\n      url += \"?__t=\" + this.newGuid();\n    }\n    return url;\n  };\n\n  /**\n   * 休眼\n   * @method sleep\n   * @param {Number} s 休眠时间（毫秒）\n   * @static\n   */\n  owner.sleep = function (s) {\n    var time = (new Date()).getTime() + s;\n    while ((new Date()).getTime() + 1 < time);\n    return;\n  };\n\n  /**\n   * 合并对象\n   * @method mix\n   * @return 合并后的对象\n   * @param {Object} r 目标对象\n   * @param {Object} s 源对象\n   * @param {Boolean} ov 是否覆盖\n   * @param {Object} wl 白名单\n   * @param {Number} mode 模式\n   * @param {Boolean} merge 深度合并\n   */\n  owner.mix = function (r, s, ov, wl, mode, merge) {\n    if (!s || !r) {\n      return r || owner;\n    }\n    //根据模式来判断，默认是Obj to Obj的  \n    if (mode) {\n      switch (mode) {\n        case 1: // proto to proto  \n          return owner.mix(r.prototype, s.prototype, ov, wl, 0, merge);\n        case 2: // object to object and proto to proto  \n          owner.mix(r.prototype, s.prototype, ov, wl, 0, merge);\n          break; // pass through  \n        case 3: // proto to static  \n          return owner.mix(r, s.prototype, ov, wl, 0, merge);\n        case 4: // static to proto  \n          return owner.mix(r.prototype, s, ov, wl, 0, merge);\n        default: // object to object is what happens below  \n      }\n    }\n    // Maybe don't even need this wl && wl.length check anymore??  \n    var i, l, p, type;\n    //白名单如果有值，就对白名单里面的属性进行合并，如果有ov，那么就  \n    if (wl && wl.length) {\n      for (i = 0, l = wl.length; i < l; ++i) {\n        p = wl[i];\n        isObject = owner.isObject(r[p]); //看具体的属性是什么类型的  \n        if (s.hasOwnProperty(p)) { //如果这个属性是p自己的  \n          if (merge && isObject) { //如果设定了merge并且属性是一个对象，那么就调用mix本身，把s[p]的属性加到r[p]上面  \n            owner.mix(r[p], s[p]);\n          } else if (ov || !(p in r)) { //如果允许ov或者r里面没有p，那么就在r里面加上p这个属性  \n            r[p] = s[p];\n          }\n        }\n      }\n    } else { //如果没有wl  \n      for (i in s) { //遍历s里面的属性  \n        if (s.hasOwnProperty(i)) { //如果i是s本身的属性，就按规则合并属性  \n          if (merge && owner.isObject(r[i], true)) {\n            owner.mix(r[i], s[i], ov, wl, 0, true); // recursive  \n          } else if (ov || !(i in r)) {\n            r[i] = s[i];\n          }\n        }\n      }\n    }\n    return r;\n  };\n\n  /**\n   * 缩短字符串\n   */\n  owner.short = function (str, maxLength) {\n    if (!str) return str;\n    maxLength = maxLength || 40;\n    var strLength = str.length;\n    var trimLength = maxLength / 2;\n    return strLength > maxLength ? str.substr(0, trimLength) + '...' + str.substr(strLength - trimLength) : str;\n  };\n\n  /**\n   * 首字母大写\n   */\n  owner.firstUpper = function (str) {\n    var self = this;\n    if (self.isNull(str)) return;\n    str = str.toLowerCase();\n    var buffer = [];\n    for (var i in str) {\n      if (i == 0) {\n        buffer.push(str[i].toUpperCase());\n      } else {\n        buffer.push(str[i]);\n      }\n    };\n    return buffer.join('');\n  };\n\n  //----\n\n  //兼容AMD模块\n  if (typeof define === 'function' && define.amd) {\n    define('ntils', [], function () {\n      return owner;\n    });\n  }\n\n})((typeof exports === 'undefined') ? (window.ntils = {}) : exports);\n//-",
    "module.exports={\n  \"name\": \"mov\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"./lib/index.js\",\n  \"scripts\": {\n    \"start\": \"nokit stop && nokit start --public ./ --port 8002\",\n    \"build\": \"browserify ./lib/index.js | uglifyjs  > ./dist/bundle.js\",\n    \"watch\": \"watchify ./lib/index.js -o 'exorcist ./dist/bundle.js.map > ./dist/bundle.js' -d\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"browserify\": \"^13.1.0\",\n    \"exorcist\": \"^0.4.0\",\n    \"nokitjs\": \"^1.25.9\",\n    \"uglifyify\": \"^3.0.3\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"dependencies\": {\n    \"cify\": \"^1.0.2\",\n    \"ntils\": \"^1.0.7\"\n  }\n}\n"
  ]
}