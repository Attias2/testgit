const Class = require('cify');
const Directive = require('./directive');
const utils = require('./utils');
const Expression = require('./expression');

const Compiler = new Class({

  constructor: function (options) {
    options = options || {};
    this.directives = options.directives || [];
  },

  findDirectives: function (type, name) {
    return this.directives.filter(function (Directive) {
      return Directive.type == type && Directive.regexp.test(name);
    }, this);
  },

  _initDirectives: function (handler) {
    //排序 directives
    handler.directives = handler.directives.sort(function (a, b) {
      return b.level - a.level;
    });
    //初始化 directives
    var initedDirectives = [];
    utils.each(handler.directives, function (index, directive) {
      directive.index = index;
      directive.init();
      initedDirectives.push(directive);
      if (directive.final) return handler.final = true;
    }, this);
    handler.directives = initedDirectives;
  },

  _compileElement: function (handler, node) {
    var elementDirectives = this.findDirectives(Directive.TYPE_ELEMENT, node.nodeName);
    elementDirectives.forEach(function (Directive) {
      handler.directives.push(new Directive({
        compiler: this,
        handler: handler,
        node: node
      }));
    }, this);
  },

  _compileAttributes: function (handler, node) {
    utils.toArray(node.attributes).forEach(function (attribute) {
      var attributeDirectives = this.findDirectives(Directive.TYPE_ATTRIBUTE, attribute.name);
      attributeDirectives.forEach(function (Directive) {
        handler.directives.push(new Directive({
          compiler: this,
          handler: handler,
          node: node,
          attribute: attribute,
          expression: Directive.expression ? new Expression(attribute.value) : null
        }));
      }, this);
    }, this);
  },

  _compileChildren: function (handler, node) {
    if (handler.final) return;
    utils.toArray(node.childNodes).forEach(function (childNode) {
      var childhandler = this.compile(childNode);
      childhandler.parent = this;
      handler.children.push(childhandler);
    }, this);
  },

  compile: function (node) {
    node._parentNode = node._parentNode || node.parentNode;
    //定义编译结果函数
    var handler = function (scope) {
      //执行指令
      handler.directives.forEach(function (directive) {
        directive.execute(scope);
      }, this);
      //执行子元素编译函数
      handler.children.forEach(function (childhandler) {
        childhandler(scope);
      }, this);
    };
    //定义 children & directives 
    handler.directives = [];
    handler.children = [];
    //编辑相关指令
    this._compileElement(handler, node);
    this._compileAttributes(handler, node);
    this._initDirectives(handler);
    this._compileChildren(handler, node);
    //返回编译后函数
    return handler;
  }

});

module.exports = Compiler;