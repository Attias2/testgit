const Class = require('cify');
const utils = require('./utils');
const Expression = require('./expression');

const Directive = function (classOpts) {
  classOpts = classOpts || {};
  if (!utils.isString(classOpts.name) || classOpts.name.length < 1) {
    throw new Error('Invalid directive name "' + classOpts.name + '"');
  }
  if (Directive.NS) {
    classOpts.fullName = Directive.NS + ':' + classOpts.name;
  } else {
    classOpts.fullName = classOpts.name;
  }
  classOpts.Expression = Expression;
  classOpts.utils = utils;
  const DirectiveClass = new Class({
    _extends: classOpts,
    constructor: function (instanceOpts) {
      //实例本身属性或方法
      utils.copy(instanceOpts, this);
    }
  });
  utils.copy(classOpts, DirectiveClass);
  utils.defineProperty(DirectiveClass, 'name', {
    get: function () { return classOpts.name; }
  });
  DirectiveClass.type = classOpts.type || Directive.TYPE_ATTRIBUTE;
  DirectiveClass.level = classOpts.level || Directive.LEVEL_GENERAL;
  DirectiveClass.regexp = classOpts.regexp || classOpts.fullName;
  if (!(DirectiveClass.regexp instanceof RegExp)) {
    DirectiveClass.regexp = new RegExp('^' + DirectiveClass.regexp + '$', 'i');
  }
  return DirectiveClass;
};

//指令类型
Directive.TYPE_ATTRIBUTE = 'attribute';
Directive.TYPE_ELEMENT = 'element';

//指令级别
Directive.LEVEL_ATTRIBUTE = -1000;
Directive.LEVEL_GENERAL = 0;
Directive.LEVEL_STATEMENT = 1000;

module.exports = Directive;