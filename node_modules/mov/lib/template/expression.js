const Class = require('cify');
const utils = require('./utils');

const Expression = new Class({

  constructor: function (code, mix) {
    this.func = mix ? this._compileMixedCode(code) : this._compileCode(code);
  },

  _compileCode: function (code) {
    code = this._escapeEOL(this._wrapCode(code));
    return new Function('scope', 'with(scope){return ' + code + '}');
  },

  _compileMixedCode: function (code) {
    var statements = this._parseMixedCode(code);
    code = this._escapeEOL(statements.join('+'));
    return new Function('scope', 'with(scope){return ' + code + '}');
  },

  _parseMixedCode: function (code) {
    var index = 0, length = code.length;
    var token = '', isExpr = false, tokens = [];
    while (index <= length) {
      var char = code[index++];
      var nextChar = code[index];
      if (utils.isNull(char)) {
        if (token.length > 0) {
          tokens.push('"' + this._escapeCode(token) + '"');
        }
        token = '';
        isExpr = false;
      } else if (!isExpr && char + nextChar == '{{') {
        if (token.length > 0) {
          tokens.push('"' + this._escapeCode(token) + '"');
        }
        token = '';
        isExpr = true;
        index++;
      } else if (isExpr && char + nextChar == '}}') {
        if (token.length > 0) {
          tokens.push(this._wrapCode(token));
        }
        token = '';
        isExpr = false;
        index++;
      } else {
        token += char;
      }
    }
    return tokens;
  },

  _escapeCode: function (str) {
    return str.replace(/"/, '\\"').replace('\r\n', '\\r\\n').replace('\n', '\\n');
  },

  _wrapCode: function (code) {
    return '((function(){try{return (' + code + ')}catch(err){return ""}})())';
  },

  _escapeEOL: function (code) {
    return code.replace(/\n/gm, '\\\n');
  },

  execute: function (scope) {
    scope = scope || {};
    return this.func.call(scope, scope);
  }

});

module.exports = Expression;