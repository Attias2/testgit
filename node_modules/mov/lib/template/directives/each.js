const Directive = require('../directive');

module.exports = new Directive({
  name: 'each',
  type: Directive.TYPE_ATTRIBUTE,
  level: Directive.LEVEL_STATEMENT,
  final: true,

  init: function () {
    this.mountNode = document.createTextNode('');
    this.node.parentNode.insertBefore(this.mountNode, this.node);
    this.node.removeAttribute(this.fullName);
    this.node.parentNode.removeChild(this.node);
    this._parseExpr();
    this._items = [];
  },

  _parseExpr: function () {
    this._type = this.attribute.value.indexOf(' in ') > -1 ? 'in' : 'of';
    var tokens = this.attribute.value.split(' ' + this._type + ' ');
    var fnText = 'utils.each(utils.getByPath(scope,"' + tokens[1] + '"),fn,this)';
    this._each = new Function('utils', 'scope', 'fn', fnText);
    var names = tokens[0].split(',').map(function (name) {
      return name.trim();
    });
    if (this._type == 'in') {
      this._index = names[0];
      this._item = names[1];
    } else {
      this._index = names[1];
      this._item = names[0];
    }
  },

  execute: function (scope) {
    var lastIndex = -1;
    var docfrag = document.createDocumentFragment();
    this._each(this.utils, scope, function (index, item) {
      //创建新 scope
      var newScope = this.utils.copy(scope);
      if (this._index) newScope[this._index] = index;
      if (this._item) newScope[this._item] = item;
      var oldItem = this._items[index];
      if (oldItem) {
        oldItem.handler(newScope);
      } else {
        var newItem = {};
        //创建新元素
        newItem.node = this.node.cloneNode(true);
        docfrag.appendChild(newItem.node);
        newItem.node._parentNode = this.node._parentNode;
        newItem.handler = this.compiler.compile(newItem.node);
        newItem.handler(newScope);
        this._items[index] = newItem;
      }
      lastIndex = index;
    }, this);
    this._items.splice(lastIndex + 1).forEach(function (item) {
      item.node.parentNode.removeChild(item.node);
    });
    if (docfrag.childNodes.length > 0) {
      this.mountNode.parentNode.insertBefore(docfrag, this.mountNode);
    }
  }

});